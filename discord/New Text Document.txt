Here are **concrete features** you can add next, chosen to enhance the messaging experience without bloating complexity. These are backend‑focused, align with your current architecture, and keep things pragmatic.

---

### ✅ **1. Message Reactions**

**Why:** Allows users to react with emojis (like 👍 ❤️ 😂).

**Schema Change (Message):**

```go
Reactions map[string][]string `bson:"reactions" json:"reactions"` // emoji => []userID
```

**Handler Example:**

```go
func ReactToMessage(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	msgID, _ := primitive.ObjectIDFromHex(ps.ByName("messageId"))
	user := utils.GetUserIDFromRequest(r)
	var body struct {
		Emoji string `json:"emoji"`
	}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil || body.Emoji == "" {
		http.Error(w, "invalid emoji", 400)
		return
	}
	db.MessagesCollection.UpdateOne(ctx,
		bson.M{"_id": msgID},
		bson.M{"$addToSet": bson.M{"reactions." + body.Emoji: user}},
	)
	w.WriteHeader(204)
}
```

---

### ✅ **2. Pin Messages**

**Why:** Useful for marking important messages per chat.

**Schema Change (Chat):**

```go
Pinned []primitive.ObjectID `bson:"pinned,omitempty" json:"pinned,omitempty"`
```

**Handler to Pin:**

```go
func PinMessage(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	chatID, _ := primitive.ObjectIDFromHex(ps.ByName("chatId"))
	msgID, _ := primitive.ObjectIDFromHex(ps.ByName("messageId"))
	db.ChatsCollection.UpdateOne(ctx,
		bson.M{"_id": chatID},
		bson.M{"$addToSet": bson.M{"pinned": msgID}},
	)
	w.WriteHeader(204)
}
```

---

### ✅ **3. Message Forwarding**

**Why:** Send the same message content to another chat.

**Handler:**

```go
func ForwardMessage(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	var body struct {
		MessageID string `json:"messageId"`
		TargetChatID string `json:"targetChatId"`
	}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		http.Error(w, "invalid body", 400)
		return
	}
	msgID, _ := primitive.ObjectIDFromHex(body.MessageID)
	chatID, _ := primitive.ObjectIDFromHex(body.TargetChatID)

	var orig Message
	if err := db.MessagesCollection.FindOne(ctx, bson.M{"_id": msgID}).Decode(&orig); err != nil {
		http.Error(w, "message not found", 404)
		return
	}

	newMsg := Message{
		ChatID:    chatID,
		Sender:    orig.Sender,
		Content:   orig.Content,
		CreatedAt: time.Now(),
	}
	res, err := db.MessagesCollection.InsertOne(ctx, newMsg)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	newMsg.ID = res.InsertedID.(primitive.ObjectID)
	json.NewEncoder(w).Encode(newMsg)
}
```

---

### ✅ **4. Typing Indicators (via WebSocket)**

**Why:** UX enhancement, already fits your current WS structure.

**Client emits:**

```json
{ "type": "typing", "chatId": "abc123" }
```

**Server broadcast:**

```go
if in.Type == "typing" {
	broadcastTyping(userID, in.ChatID)
	continue
}
```

**Typing Broadcast Payload:**

```go
type TypingPayload struct {
	Type   string `json:"type"`   // "typing"
	UserID string `json:"userId"` // who is typing
	ChatID string `json:"chatId"`
}
```

---

### ✅ **5. Chat Name for Group Chats**

**Why:** Group chats need identifiers beyond participant list.

**Schema Change:**

```go
Name *string `bson:"name,omitempty" json:"name,omitempty"`
```

**Handler:**

```go
func RenameChat(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	chatID, _ := primitive.ObjectIDFromHex(ps.ByName("chatId"))
	var body struct{ Name string }
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil || body.Name == "" {
		http.Error(w, "invalid name", 400)
		return
	}
	db.ChatsCollection.UpdateOne(ctx,
		bson.M{"_id": chatID},
		bson.M{"$set": bson.M{"name": body.Name}},
	)
	w.WriteHeader(204)
}
```

---

### ✅ **6. Soft Delete Chat (Hide, not Remove)**

**Why:** Allow users to hide chats (but not delete them for others).

**New field (Chat):**

```go
HiddenBy []string `bson:"hiddenBy,omitempty" json:"-"`
```

**Update your `GetUserChats` filter:**

```go
cursor, _ := db.ChatsCollection.Find(ctx, bson.M{
	"participants": user,
	"hiddenBy":     bson.M{"$ne": user},
})
```

**Add Hide Handler:**

```go
func HideChat(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	chatID, _ := primitive.ObjectIDFromHex(ps.ByName("chatId"))
	user := utils.GetUserIDFromRequest(r)
	db.ChatsCollection.UpdateOne(ctx,
		bson.M{"_id": chatID},
		bson.M{"$addToSet": bson.M{"hiddenBy": user}},
	)
	w.WriteHeader(204)
}
```

---

If you're looking for a next milestone:

* Add `@mentions` (via content regex + user indexing)
* Add support for **editing file attachments**
* Add optional **threaded replies** (Message.ReplyTo `ObjectID`)

Let me know which one you want to go deep on.
